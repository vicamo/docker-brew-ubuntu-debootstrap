---
name: Build Suite
on:
  workflow_call:
    inputs:
      distribution:
        description: 'Distribution name, e.g. ubuntu.'
        type: string
        required: true
      release:
        description: 'Ubuntu release number.'
        type: string
        required: true
      codename:
        description: 'Debian codename.'
        type: string
        required: true
      suite:
        description: 'Debian suite.'
        type: string
        required: true
      active:
        description: 'Use default/archive apt mirror.'
        type: boolean
        required: true
      architectures:
        description: 'Architectures in JSON array'
        type: string
        required: true
      repository:
        description: 'Target docker repository'
        type: string
        required: true
      dry_run:
        description: 'Do not push to registry'
        type: boolean
        default: true
    secrets:
      username:
        required: false
      password:
        required: false

permissions:
  contents: read

env:
  DISTRO: ${{ inputs.distribution }}
  RELEASE: ${{ inputs.release }}
  CODENAME: ${{ inputs.codename }}
  SUITE: ${{ inputs.suite }}
  ACTIVE: ${{ inputs.active && 'true' || '' }}
  REPOSITORY: ${{ inputs.repository }}
  DRY_RUN: ${{ inputs.dry_run && 'true' || '' }}

jobs:
  per-arch:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include: ${{ fromJSON(inputs.architectures) }}
    env:
      ARCH: ${{ matrix.arch }}
      PLATFORM: ${{ matrix.platform }}
      USE_PORTS: ${{ matrix.use_ports && 'true' || 'false' }}
      KNOWN_FAILURE: ${{ matrix.known_failure }}
      # Use the snapshot from yesterday to preven under sync.
      SNAPSHOT_DATE: ${{ matrix.timestamp || 'yesterday' }}
      INCLUDE_PKGS: ${{ matrix.pkgs }}
    steps:
      - name: Set up QEMU (docker/setup-qemu-action)
        if:
          matrix.qemu == '' && matrix.arch != 'amd64' && matrix.arch !=
          'amd64v3' && matrix.arch != 'i386' && matrix.arch != 'lpia'
        uses: docker/setup-qemu-action@v3

      - name: Set up QEMU (Ubuntu)
        if:
          matrix.qemu != '' && matrix.arch != 'amd64' && matrix.arch !=
          'amd64v3' && matrix.arch != 'i386' && matrix.arch != 'lpia'
        run: |
          sudo apt-get update -q
          sudo apt-get install -yq binfmt-support qemu-user-static

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.12.0

      - name: Dump QEMU supportness
        run: ls -al /proc/sys/fs/binfmt_misc

      - name: Download debuerreotype image tarball
        uses: actions/download-artifact@v5
        with:
          name: debuerreotype
          path: /tmp
      - name: Load debuerreotype image
        run: |
          docker load --input /tmp/debuerreotype.tar
          docker images -a

      - name: Checkout Debuerreotype
        uses: actions/checkout@v5
        with:
          fetch-depth: 1
          repository: vicamo/docker_debuerreotype
          ref: 20251021
          path: debuerreotype

      - name: Debuerreotype
        id: debuerreotype
        working-directory: debuerreotype
        continue-on-error: ${{ matrix.known_failure != '' }}
        timeout-minutes: 20
        run: |
          mkdir output
          output_dir="output/ubuntu/${ARCH}/${CODENAME}"

          args=()
          [ -n "${ACTIVE}" ] && [ -z "${{ matrix.timestamp }}" ] || args+=('--eol')
          [ -z "${INCLUDE_PKGS}" ] || args+=(--include "${INCLUDE_PKGS}")
          args+=(--arch "${ARCH}")

          ret=0
          ./docker-run.sh --no-build --image local/debuerreotype:latest \
              "./examples/${DISTRO}.sh" "${args[@]}" \
              output "${CODENAME}" || ret=$?
          if [[ ${ret} -eq 0 ]]; then
            if [ -n "${KNOWN_FAILURE}" ]; then
              echo "::error title=Expected failure succeeds::Expect ${DISTRO}/${CODENAME}:${ARCH} to fail but passed. See ${KNOWN_FAILURE}"
            fi
          else
            if [ -n "${KNOWN_FAILURE}" ]; then
              echo "::warning title=Expected failure::Expect ${DISTRO}/${CODENAME}:${ARCH} to fail. See ${KNOWN_FAILURE}"
            else
              echo "::error title=Unexpected failure::${DISTRO}/${CODENAME}:${ARCH} failed with ${ret}"
            fi
            exit ${ret}
          fi

          echo "output_dir=debuerreotype/${output_dir}" | tee -a "${GITHUB_OUTPUT}"

      - name: Load and test image
        if: ${{ steps.debuerreotype.outcome == 'success' }}
        run: |
          tag="${REPOSITORY}:${CODENAME}-${ARCH}"
          printf "FROM scratch\nADD rootfs.tar.xz /\nCMD [\"/bin/bash\"]" | \
              docker buildx build --load --platform "${PLATFORM}" \
                  --tag "${tag}" \
                  --file - "${{ steps.debuerreotype.outputs.output_dir}}"
          docker run --rm "${tag}" apt-get update

      - uses: actions/upload-artifact@v4
        if: ${{ steps.debuerreotype.outcome == 'success' }}
        with:
          name: ${{ env.CODENAME }}-${{ env.ARCH }}-rootfs
          path: ${{ steps.debuerreotype.outputs.output_dir}}
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - per-arch
    env:
      ARCHES: ${{ inputs.architectures }}
    steps:
      - uses: actions/download-artifact@v5
        with:
          pattern: ${{ env.CODENAME }}-*

      - # Add support for more platforms with QEMU (optional)
        name: Set up QEMU
        run: |
          sudo apt-get update -q
          sudo apt-get install -yq binfmt-support qemu-user-static
          ls -al /proc/sys/fs/binfmt_misc

      - id: platforms
        run: |
          platforms="$(echo "${ARCHES}" | jq -c -M 'map(.platform) | join(",")')"
          echo "platforms=${platforms}" | tee -a "${GITHUB_OUTPUT}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ steps.platforms.outputs.platforms }}

      - name: Login to Docker Hub
        if: ${{ !inputs.dry_run }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.repository }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Build images
        run: |
          load_or_push='--push'
          [ -z "${DRY_RUN}" ] || load_or_push='--load'

          manifest_annotations=()
          index_annotations=()
          while read -r line; do
            case "$line" in
            manifest:*) manifest_annotations+=(--annotation "${line}") ;;
            index:*)    index_annotations+=(--annotation "${line}") ;;
            esac
          done <<<"${DOCKER_METADATA_OUTPUT_ANNOTATIONS}"

          labels=()
          while read -r line; do
            labels+=(--label "${line}")
          done <<<"${DOCKER_METADATA_OUTPUT_LABELS}"

          for flavor in "" slim; do
            digests=()

            while read -r arch platform known_failure; do
              echo "::group::${CODENAME}-${arch}${flavor:+-${flavor}}"

              context_dir="${CODENAME}-${arch}-rootfs${flavor:+/${flavor}}"
              tag="${REPOSITORY}:${CODENAME}-${arch}${flavor:+-${flavor}}"
              tags=(--tag "${tag}")
              if [ -n "${SUITE}" ]; then
                tags+=(--tag "${REPOSITORY}:${SUITE}-${arch}${flavor:+-${flavor}}")
                if [ "${SUITE}" = "stable" ]; then
                  tags+=(--tag "${REPOSITORY}:latest-${arch}${flavor:+-${flavor}}")
                fi
              fi

              tags+=(--tag "${REPOSITORY}:${RELEASE}-${arch}${flavor:+-${flavor}}")

              if ! (printf "FROM scratch\nADD rootfs.tar.xz /\nCMD [\"/bin/bash\"]" | \
                  docker buildx build "${load_or_push}" \
                      --platform "${platform}" \
                      "${labels[@]}" "${tags[@]}" "${manifest_annotations[@]}" \
                      --metadata-file "${context_dir}/docker.metadata" \
                      --file - "${context_dir}"); then
                digest=
                if [ -z "${DRY_RUN}" ]; then
                  # generate: linux/amd64:docker.io/library/ubuntu:noble@sha256:69ce9399...
                  result="$(docker buildx imagetools inspect "${REPOSITORY}:${CODENAME}${flavor:+-${flavor}}" | \
                      awk '/Name: +\S+@sha256:/ { digest=$2; getline; getline; platform=$2; print platform ":" digest}' | \
                      grep "^${platform}:" || true)"
                  digest="${result#"${platform}":}"
                fi

                if [ -n "${digest}" ]; then
                  digests+=("${digest}")
                elif [ -z "${known_failure}" ]; then
                  exit 1
                fi
              else
                cat "${context_dir}/docker.metadata"; echo
                digests+=("$(jq -c -M -r '."containerimage.digest"' < "${context_dir}/docker.metadata")")
              fi

              echo "::endgroup::"
            done < <(echo "${ARCHES}" | \
                jq -r -c -M '.[] | .arch + " " + .platform + " " + .known_failure')

            echo "::group::${CODENAME}${flavor:+-${flavor}}"

            tag="${REPOSITORY}:${CODENAME}${flavor:+-${flavor}}"
            tags=(--tag "${tag}")
            if [ -n "${SUITE}" ]; then
              tags+=(--tag "${REPOSITORY}:${SUITE}${flavor:+-${flavor}}")
              if [ "${SUITE}" = "stable" ]; then
                tags+=(--tag "${REPOSITORY}:latest${flavor:+-${flavor}}")
              fi
            fi

            tags+=(--tag "${REPOSITORY}:${RELEASE}${flavor:+-${flavor}}")

            ${DRY_RUN:+echo} docker buildx imagetools create \
                "${tags[@]}" "${index_annotations[@]}" "${digests[@]}"

            echo "::endgroup::"
          done

          echo "::group::docker images"
          docker images
          echo "::endgroup::"
